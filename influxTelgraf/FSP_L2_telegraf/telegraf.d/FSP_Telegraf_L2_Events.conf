###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################
# Save metrics to an SQL Database
[[outputs.sql]]
   namepass = ["L_GenerEventPostgres"]
  ## Database driver
  ## Valid options: mssql (Microsoft SQL Server), mysql (MySQL), pgx (Postgres),
  ##  sqlite (SQLite3), snowflake (snowflake.com) clickhouse (ClickHouse)
   driver = "mysql"

  ## Data source name
  ## The format of the data source name is different for each database driver.
  ## See the plugin readme for details.
   data_source_name = "$CXP_POSTGRESQL_USER:$CXP_POSTGRESQL_PASSWORD@tcp($CXP_IP_DOCKER_HOST:$CXP_POSTGRESQL_PORT)/$CXP_POSTGRESQL_EVENTS_DB"
  # data_source_name = "jrtelegraf:lHevDgr_aqHDlBOpQirf28@tcp(192.168.122.169:33306)/telegrafdb"
  ## Timestamp column name
   timestamp_column = "_time"

  ## Table creation template
  ## Available template variables:
  ##  {TABLE} - table name as a quoted identifier
  ##  {TABLELITERAL} - table name as a quoted string literal
  ##  {COLUMNS} - column definitions (list of quoted identifiers and types)
  # table_template = "CREATE TABLE {TABLE}({COLUMNS})"
   table_template = "CREATE TABLE ARE_2_Event(_time TIMESTAMP, ActivePower_kW DOUBLE, EL_Lv0 TEXT, name TEXT, EL_Lv1 TEXT, EL_Lv2 TEXT, EL_Lv3 TEXT, host TEXT, slave_id TEXT, type TEXT)"

  # table_template = "CREATE TABLE system(_time TIMESTAMP,load1 DOUBLE, load5 DOUBLE, load15 DOUBLE, n_cpus INT, host TEXT);"
  # table_template = "INSERT INTO ARE_2(_time, host, name, slave_id, ActivePower_kW, _value, type) VALUES($1,$2,$3,$4,$5,$6,$7)"
  # table_template = "CREATE TABLE {tablatest}({columnatest})"

  ## Table existence check template
  ## Available template variables:
  ##  {TABLE} - tablename as a quoted identifier
  # table_exists_template = "SELECT 1 FROM ARE_2 LIMIT 1"

  ## Initialization SQL
   init_sql = "SET sql_mode='ANSI_QUOTES';"

  ## Maximum amount of time a connection may be idle. "0s" means connections are
  ## never closed due to idle time.
  # connection_max_idle_time = "0s"

  ## Maximum amount of time a connection may be reused. "0s" means connections
  ## are never closed due to age.
  # connection_max_lifetime = "0s"

  ## Maximum number of connections in the idle connection pool. 0 means unlimited.
  # connection_max_idle = 2

  ## Maximum number of open connections to the database. 0 means unlimited.
  # connection_max_open = 0

  ## NOTE: Due to the way TOML is parsed, tables must be at the END of the
  ## plugin definition, otherwise additional config options are read as part of
  ## the table

  ## Metric type to SQL type conversion
  ## The values on the left are the data types Telegraf has and the values on
  ## the right are the data types Telegraf will use when sending to a database.
  ##
  ## The database values used must be data types the destination database
  ## understands. It is up to the user to ensure that the selected data type is
  ## available in the database they are using. Refer to your database
  ## documentation for what data types are available and supported.
  [outputs.sql.convert]
    integer              = "INT"
    real                 = "DOUBLE"
    text                 = "TEXT"
    timestamp            = "TIMESTAMP"
    defaultvalue         = "TEXT"
    unsigned             = "UNSIGNED"
    bool                 = "BOOL"
  #  ## This setting controls the behavior of the unsigned value. By default the
  #  ## setting will take the integer value and append the unsigned value to it. The other
  #  ## option is "literal", which will use the actual value the user provides to
  #  ## the unsigned option. This is useful for a database like ClickHouse where
  #  ## the unsigned value should use a value like "uint64".
    conversion_style = "unsigned_suffix"
